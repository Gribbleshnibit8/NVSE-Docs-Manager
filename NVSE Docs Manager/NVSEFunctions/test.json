[
  {
    "Parameters": [
      {
        "type": "var1:string_var"
      },
      {
        "type": "var2:string_var",
        "optional": "true"
      },
      {
        "type": "var3:string_var",
        "optional": "true"
      },
      {
        "type": "var4:string_var",
        "optional": "true"
      },
      {
        "type": "var5:string_var",
        "optional": "true"
      },
      {
        "type": "var6:string_var",
        "optional": "true"
      },
      {
        "type": "var7:string_var",
        "optional": "true"
      },
      {
        "type": "var8:string_var",
        "optional": "true"
      },
      {
        "type": "var9:string_var",
        "optional": "true"
      },
      {
        "type": "var10:string_var",
        "optional": "true"
      }
    ],
    "Description": [
      "Destroys a string variable, setting its value to zero and preventing its contents from being saved in the savegame."
    ],
    "Name": "sv_Destruct",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "string:FormatString"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      },
      {
        "type": "Variable",
        "optional": "True"
      }
    ],
    "ReturnType": [
      {
        "type": "newString:string_var"
      }
    ],
    "Description": [
      "Returns a new string_var whose value is the passed format string."
    ],
    "Examples": [
      {
        "Example": [
          "Copying a string:",
          "set string2 to sv_construct \"%z\" string1"
        ]
      },
      {
        "Example": [
          "Concatenating two strings:",
          "set string2 to sv_construct \"%z%z\" string1 string2"
        ]
      }
    ],
    "Name": "sv_Construct",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "FormatSpecifiers",
        "type": "string:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "string_var",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets the contents of a string variable.",
      "This function is of limited use, as the same thing can be achieved by simply 'let'ing a string literal to a string variable."
    ],
    "Name": "sv_Set",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "FormatSpecifiers",
        "type": "string:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "string_var"
      },
      {
        "type": "bool:CaseSensitive",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "int:Comparison"
      }
    ],
    "Description": [
      "Compares a string to a formatted string. Performs a case-insensitive comparison by default. Returns 0 if the strings are equal, 1 if the string variable occurs alphabetically before the formatted string, -1 if the string variable occurs alphabetically after the formatted string, or -2 if the comparison fails."
    ],
    "Name": "sv_Compare",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var"
      }
    ],
    "ReturnType": [
      {
        "type": "int:length"
      }
    ],
    "Description": [
      "Returns the number of characters in a string variable."
    ],
    "Name": "sv_Length",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var"
      },
      {
        "type": "int:StartPos",
        "optional": "true"
      },
      {
        "type": "int:HowMany",
        "optional": "true"
      }
    ],
    "Description": [
      "Erases the specified number of characters from a string starting at the specified position. If omitted, startPos = 0. Omitting numToErase erases all characters from startPos to the end of the string."
    ],
    "Name": "sv_Erase",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:string_var"
      },
      {
        "type": "int:startPos",
        "optional": "true"
      },
      {
        "type": "int:howMany",
        "optional": "true"
      }
    ],
    "Description": [
      "Returns a substring of a string variable.",
      "Deprecated. Use slice notation instead: <code>let substr := str[a:b]</code>"
    ],
    "Name": "sv_SubString",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var"
      }
    ],
    "ReturnType": [
      {
        "type": "Float"
      }
    ],
    "Description": [
      "Attempts to convert the contents of a string variable to a number. Valid characters include digits, a leading sign, and an e to indicate scientific notation. Conversion halts at the first invalid character."
    ],
    "Name": "sv_ToNumeric",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "FormatSpecifiers",
        "type": "string:FormatString"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "string_var"
      },
      {
        "type": "bool:CaseSensitive",
        "optional": "true"
      }
    ],
    "Description": [
      "Inserts a substring into a string at the specified position, provided the position is less than the length of the string, or prepends it if no position is specified."
    ],
    "Name": "sv_Insert",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "FormatSpecifiers",
        "type": "string:FormatString"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "string_var:Source"
      },
      {
        "type": "int:StartPos",
        "optional": "true"
      },
      {
        "type": "int:EndPos",
        "optional": "true"
      },
      {
        "type": "bool:CaseSensitive",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "int:Count"
      }
    ],
    "Description": [
      "Returns the number of occurrences of a substring within a string variable, using the same arguments as sv_Find."
    ],
    "Name": "sv_Count",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "FormatSpecifiers",
        "type": "string:FormatString"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "float:Variable",
        "optional": "true"
      },
      {
        "type": "string_var:Source"
      },
      {
        "type": "int:StartPos",
        "optional": "true"
      },
      {
        "type": "int:EndPos",
        "optional": "true"
      },
      {
        "type": "bool:CaseSensitive",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "int:Index"
      }
    ],
    "Description": [
      "Returns the index of the first occurrence of a substring within a string variable, starting at the specified position and only including occurrences contained completely within the range [startPos, startPos + searchLen].",
      "Returns -1 if the substring is not found in the string variable.",
      "Omit the arguments to search the entire string without regard to case."
    ],
    "Name": "sv_Find",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "FormatSpecifiers",
        "type": "subString:formatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "int:string_var"
      },
      {
        "type": "int:startPos",
        "optional": "true"
      },
      {
        "type": "int:endPos",
        "optional": "true"
      },
      {
        "type": "int:bCaseSensitive",
        "optional": "true"
      },
      {
        "type": "int:howMany",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "int:NumReplaced"
      }
    ],
    "Description": [
      "Replaces occurrences of a string1 with string2 within a string variable. Both the text to replace and that with which to replace it are passed in a single format string separated by a pipe character as in \"toReplace.\""
    ],
    "Name": "sv_Replace",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsLetter"
      }
    ],
    "Description": [
      "Returns 1 if the character is an alphabetic character."
    ],
    "Name": "IsLetter",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsDigit"
      }
    ],
    "Description": [
      "Returns 1 if the character is a numeric character."
    ],
    "Name": "IsDigit",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsPrintable"
      }
    ],
    "Description": [
      "Returns 1 if the character is a printable character."
    ],
    "Name": "IsPrintable",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsPunctuation"
      }
    ],
    "Description": [
      "Returns 1 if the character is a punctuation character."
    ],
    "Name": "IsPunctuation",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsUpperCase"
      }
    ],
    "Description": [
      "Returns 1 if the character is an uppercase letter."
    ],
    "Name": "IsUpperCase",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:int"
      },
      {
        "type": "int:int"
      }
    ],
    "Description": [
      "Returns the ASCII code of the character at the specified position in a string variable.",
      "Deprecated. Use bracket notation: <code>let char := str[pos]</code>"
    ],
    "Name": "sv_GetChar",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "int:Character"
      }
    ],
    "Description": [
      "Converts a single character to its equivalent ASCII code."
    ],
    "Name": "CharToAscii",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "int:UpperCharacter"
      }
    ],
    "Description": [
      "Converts a character to uppercase."
    ],
    "Name": "ToUpper",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Character"
      }
    ],
    "ReturnType": [
      {
        "type": "int:LowerCharacter"
      }
    ],
    "Description": [
      "Converts a character to lowercase."
    ],
    "Name": "ToLower",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:ModIndex"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Name"
      }
    ],
    "Description": [
      "Returns the name of the nth active mod."
    ],
    "Name": "GetNthModName",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Name"
      }
    ],
    "Description": [
      "Returns the name of an object."
    ],
    "Name": "GetName",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:SettingName"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Setting"
      }
    ],
    "Description": [
      "Returns the value of a string game setting."
    ],
    "Name": "GetStringGameSetting",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:SettingGroup:SettingName"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Setting"
      }
    ],
    "Description": [
      "Returns the value of a string INI setting."
    ],
    "Examples": [
      {
        "Example": [
          "let s := GetStringIniSetting \"sDPad:LANGUAGE\""
        ]
      }
    ],
    "Name": "GetStringIniSetting",
    "Alias": "",
    "Version": "4.5",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "settingNameAndNewValue:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets the string value of a game setting. The new string value is contained within the format string, following the setting name and separated by a pipe character, i.e. \"nameOfGameSetting|newValueOfGameSetting\". When calling from the console, use '@' instead of the pipe character."
    ],
    "Name": "SetStringGameSettingEX",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:SettingGroup:SettingName"
      }
    ],
    "Description": [
      "Returns the value of a string INI setting."
    ],
    "Examples": [
      {
        "Example": [
          "SetStringIniSetting \"settingGroup|settingName\""
        ]
      }
    ],
    "Name": "SetStringIniSettings",
    "Alias": "",
    "Version": "4.5",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Path"
      }
    ],
    "Description": [
      "Returns the model path of an object."
    ],
    "Examples": [
      {
        "Example": [
          "let ModelName :=  objectRef.GetModelPath"
        ]
      }
    ],
    "Name": "GetModelPath",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Path"
      }
    ],
    "Description": [
      "Returns the icon path of an object."
    ],
    "Name": "GetIconPath",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Biped_Path_Codes",
        "type": "int:BipedPathCode"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Path"
      }
    ],
    "Description": [
      "Returns the file path of one of the models for the specified biped object."
    ],
    "Name": "GetBipedModelPath",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Biped_Path_Codes",
        "type": "int:BipedPathCode"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Path"
      }
    ],
    "Description": [
      "Returns an icon path."
    ],
    "Name": "GetBipedIconPath",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "path:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets a simple model path."
    ],
    "Name": "SetModelPathEX",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "path:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets a simple icon path."
    ],
    "Name": "SetIconPathEX",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "path:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "url": "Biped_Path_Codes",
        "type": "int:BipedPathCode"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets a biped icon path."
    ],
    "Name": "SetBipedIconPathEX",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "string:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "url": "Biped_Path_Codes",
        "type": "int:whichPath"
      },
      {
        "type": "item:ObjectID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets a biped model path."
    ],
    "Name": "SetBipedModelPathEX",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Path"
      }
    ],
    "Description": [
      "Returns the texture path of an object. This command is identical to GetIconPath, but also works for other object types such as skills, classes, and miscellaneous objects."
    ],
    "Name": "GetTexturePath",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var:Path"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets the texture path of an object. This command works for a broader set of objects than SetIconPathEX.."
    ],
    "Name": "SetTexturePath",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:Faction"
      },
      {
        "type": "int:WhichRank"
      },
      {
        "type": "bool:Female",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:RankName"
      }
    ],
    "Description": [
      "Returns the title of the nth rank in a faction. Optionally returns the female rank name."
    ],
    "Name": "GetNthFactionRankName",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Format_Specifiers",
        "type": "path:FormatString"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "Variable",
        "optional": "true"
      },
      {
        "type": "ref:Faction"
      },
      {
        "type": "int:WhichRank"
      },
      {
        "type": "bool:Female",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets the title of the nth rank in a faction. Optionally sets the female rank name."
    ],
    "Name": "SetNthFactionRankNameEX",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "DirectX_Scancodes",
        "type": "int:KeyCode"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:KeyName"
      }
    ],
    "Description": [
      "Returns the name of a key given its DirectInput scan code."
    ],
    "Name": "GetKeyName",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Input"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:ASCIICode"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Character"
      }
    ],
    "Description": [
      "Returns the character associated with an ASCII code as a string."
    ],
    "Name": "AsciiToChar",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:Object",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:FormID"
      }
    ],
    "Description": [
      "Returns the formID of the specified object as a hexadecimal string. If the object cannot be found in memory (for example, a non-persistent reference), returns \"00000000\"."
    ],
    "Name": "GetFormIDString",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "String",
      "Hex"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Number"
      },
      {
        "type": "int:Width",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:HexValue"
      }
    ],
    "Description": [
      "Returns a string representation of an integer in hexadecimal format. An optional width parameter ranging from 0 to 8 specifies the minimum number of digits toinclude; unused digits are padded with zeroes. By default, 8 digits are included."
    ],
    "Name": "NumToHex",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var:Expression"
      },
      {
        "type": "bool:IsHex",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "float:Number"
      }
    ],
    "Description": [
      "Takes a string expression and attempts to convert it to a numeric value. By default the string is assumed to be in decimal notation containing digits, at most one decimal point, and an optional leading sign. If the string is prefixed with \"0x\" or the optional argument is non-zero, the string is interpreted in hexadecimal notation instead, with valid characters consisting of digits and the letters 'A' through 'F'. Returns 0 if the conversion fails."
    ],
    "Name": "ToNumber",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var:ToSplit"
      },
      {
        "type": "int:Delimiters"
      }
    ],
    "ReturnType": [
      {
        "type": "array_var:SubStrings"
      }
    ],
    "Description": [
      "Given a string and a set of delimiters, returns an Array containing all the substrings separated by one or more of the delimiting characters. For example, <span class=\"mono\">sv_Split \"#This is.a##. string.\" \".# \" returns { \"This\", \"is\", \"a\", \"string\" }</span>. The '.', '#', and space characters are removed."
    ],
    "Name": "sv_Split",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [],
    "ReturnType": [
      {
        "type": "string_var:Directory"
      }
    ],
    "Description": [
      "Returns the path to the Fallout directory."
    ],
    "Name": "GetFalloutDirectory",
    "Alias": "GetFalloutDir",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var:Source"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Percentified"
      }
    ],
    "Description": [
      "Takes an input string and returns it with each '%' character replaced by two '%' characters. For instance, \"100% gold\" becomes \"100%% gold\" and \"99.99%%\" becomes \"99.99%%%%\". The argument can be any expression evaluating to a string value."
    ],
    "Name": "sv_Percentify",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:Object",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:FormID"
      }
    ],
    "Description": [
      "Returns the form ID stored in an array element or ref variable as a string regardless of whether or not the formID is valid."
    ],
    "Name": "GetRawFormIDString",
    "Alias": "GetFormIDString2",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var:Source"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:LowerString"
      }
    ],
    "Description": [
      "Converts all characters in the string to lowercase."
    ],
    "Name": "sv_ToLower",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string_var:Source"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:UpperString"
      }
    ],
    "Description": [
      "Converts all characters in the string to uppercase."
    ],
    "Name": "sv_ToUpper",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Actor_Value_Codes",
        "type": "actorValue:ToConvert"
      }
    ],
    "ReturnType": [
      {
        "url": "Actor_Value_Codes",
        "type": "string_var:ActorValueName"
      }
    ],
    "Description": [
      "Returns the localized string corresponding to an actor value."
    ],
    "Name": "ActorValueToString",
    "Alias": "AVString",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "url": "Actor_Value_Codes",
        "type": "actorValueCode:ToConvert"
      }
    ],
    "ReturnType": [
      {
        "url": "Actor_Value_Codes",
        "type": "string_var:ActorValueName"
      }
    ],
    "Description": [
      "Returns the localized string corresponding to an actor value code."
    ],
    "Name": "ActorValueToStringC",
    "Alias": "AVStringC",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "String"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "string_var:Path"
      }
    ],
    "Description": [
      "Get the path to the scope model of a weapon."
    ],
    "Name": "GetScopeModelPath",
    "Alias": "",
    "Version": "4.2.4",
    "Convention": "E",
    "Tags": [
      "String",
      "Weapon"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:Path"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "Description": [
      "Set the path to the scope model of a weapon."
    ],
    "Name": "SetScopeModelPath",
    "Alias": "",
    "Version": "4.2.4",
    "Convention": "E",
    "Tags": [
      "String",
      "Weapon"
    ]
  },
  {
    "Parameters": [
      {
        "type": "labelID:Integer",
        "optional": "true"
      }
    ],
    "Description": [
      "Defines a labeled position in a script which subsequent calls to Goto can use to create loops. The label must be defined before Goto is called."
    ],
    "Name": "Label",
    "Alias": "",
    "Version": "1.1",
    "Convention": "B",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "labelID:Integer",
        "optional": "true"
      }
    ],
    "Description": [
      "Jump to a labeled position in the script previously defined by a call to Label. Execution will return to the label, simulating a loop. Be careful to provide an exit condition to avoid creating infinite loops."
    ],
    "Name": "Goto",
    "Alias": "",
    "Version": "1.1",
    "Convention": "B",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "expression"
      },
      {
        "type": ":="
      },
      {
        "type": "expression"
      }
    ],
    "Description": [
      "The Let statement is NVSE's version of Fallout's <code>Set</code> statement. It takes the form <code>let <span class=\"op\">expr1</span> := <span class=\"op\">expr2</span></code> where <span class=\"op\">expr1</span> evaluates to something which can hold a value, such as a variable or array element, and <span class=\"op\">expr2</span> is an expression of a type which can be stored in <span class=\"op\">expr1</span>. Values within expressions can include arithmetic expressions, function calls, etc. The assignment operator checks the types of its operands, so it will allow assigning a number to a <code>short</code> variable but not to a <code>string_var</code>."
    ],
    "Examples": [
      {
        "Example": [
          "string_var str",
          "array_var arr",
          "short num",
          "let str := \"a string\"",
          "let str := str[0:num] + player.GetName + \" some more text\"",
          "let arr := ar_Construct Map",
          "let arr[(num + player.GetPos Z) / player.GetPos X] := player.GetDistance someRef ^ 2"
        ]
      }
    ],
    "Name": "Let",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "boolean expression"
      }
    ],
    "ReturnType": [
      {
        "type": "Bool"
      }
    ],
    "Description": [
      "Used within if statements to test the value of an expression. This allows OBSE expressions to be used as conditions. The expression must evaluate to a boolean value."
    ],
    "Examples": [
      {
        "Example": [
          "if eval (array[0] &gt; 1)",
          "\t; code executes if array[0] &gt; 1",
          "endif"
        ]
      }
    ],
    "Name": "eval",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "boolean expression:<unknown>"
      }
    ],
    "Description": [
      "Evaluates an NVSE expression. If the expression is true, the statements following it will be executed until the next Loop command, at which point control returns to the top of the loop and the expression is evaluated again."
    ],
    "Name": "While",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Integer",
        "optional": "true"
      }
    ],
    "Description": [
      "Returns execution to the most recent While or ForEach command. The loop condition is evaluated and if it passes, execution continues inside the body of the loop. Otherwise, execution returns to the instruction immediately following the Loop command."
    ],
    "Name": "loop",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "iterator:Multi"
      }
    ],
    "Description": [
      "<code>ForEach</code> is used to iterate over the elements of an array, the characters in a string, or references to objects in a container. The syntax <code>ForEach item &lt;- collection</code> is used to indicate the variable (\"<code>item</code>\") which will hold the current element and the string, array, or container reference (\"<code>collection</code>\") from which elements will be drawn. On loop entry, <code>item</code> is set to the first element in <code>collection</code>. When the next <code>Loop</code> command is encountered, <code>item</code> is set to the next element in <code>collection</code> and execution returns to the top of the loop. The loop terminates when all elements have been returned. The type of <code>item</code> varies based on the type of <code>collection</code>.",
      "For arrays, <code>item</code> is an array_var, specifically a StringMap. The loop will initialize <code>item</code> with two elements: \"key\", which holds the key of the current element, and \"value\", which holds the value associated with that key. Within a <code>ForEach</code> loop you can access both fields via <code>item[\"key\"]</code> and <code>item[\"value\"]</code>. Once the loop terminates, <code>item</code> is reset to an uninitialized array."
    ],
    "Name": "ForEach",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Integer",
        "optional": "true"
      }
    ],
    "Description": [
      "Must be called inside of a ForEach or While loop. Continue skips the rest of the body of a loop, returning execution to the top of the loop and evaluating the loop condition. If the condition passes, execution enters the loop body, otherwise the loop terminates and continues from the instruction following the corresponding Loop command."
    ],
    "Name": "Continue",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Integer",
        "optional": "true"
      }
    ],
    "Description": [
      "Must be called inside of a ForEach or While loop. Break causes the loop to exit immediately, forcing execution to jump to the instruction immediately following the next Loop command."
    ],
    "Name": "Break",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "expression"
      }
    ],
    "ReturnType": [
      {
        "type": "String"
      }
    ],
    "Description": [
      "Attempts to convert an expression to a string. For numeric expressions, the result is a string representation of the numeric value. For objects, it is the name of the object if available; otherwise it is the formID expressed in hexadecimal notation. For string expressions no conversion is necessary."
    ],
    "Examples": [
      {
        "Example": [
          "let aStringVar := ToString (aNumber + 1)"
        ]
      }
    ],
    "Name": "ToString",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:expr"
      }
    ],
    "Description": [
      "Prints a string expression to the console. This is mainly a convenience function to eliminate the need for temporary string variables when printing complex strings using PrintToConsole, as it supports string concatenation, the ToString function, etc."
    ],
    "Name": "Print",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "expression:String"
      }
    ],
    "ReturnType": [
      {
        "type": "Bool"
      }
    ],
    "Description": [
      "Attempts to evaluate an expression, returning false if an error occurs during evaluation and true otherwise. This can be useful when checking if an array index is out of bounds or if an element exists with a given key, among other things. TestExpr suppresses the output of error messages to the console and log file."
    ],
    "Examples": [
      {
        "Example": [
          "array_var array",
          "let array := ar_Construct Array",
          "if testexpr (array[5] := 2)",
          "\tPrintC \"5 is a valid index, assignment succeeded.\"",
          "else",
          "\tPrintC \"Index 5 is out of bounds, no assignment.\"",
          "endif",
          "let array := ar_Construct StringMap",
          "if testexpr (array[\"INDEX\"])",
          "\tPrintC \"An element exists in array with key 'INDEX'\"",
          "else",
          "\tPrintC \"No element with the specified key exists.\"",
          "endif"
        ]
      }
    ],
    "Name": "TestExpr",
    "Alias": "",
    "Version": "4.1",
    "Convention": "",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "expression"
      }
    ],
    "ReturnType": [
      {
        "type": "string:Type"
      }
    ],
    "Description": [
      "Returns a string representing the type of an expression. This is mainly useful for determining the type of an array element at run-time. Possible return values: \"String\", \"Number\", \"Form\", \"Array\", \"StringMap\", \"Map\"."
    ],
    "Name": "TypeOf",
    "Alias": "",
    "Version": "4.1",
    "Convention": "",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Integer",
        "optional": "true"
      }
    ],
    "Description": [
      "A blocktype which precedes the body of a function. This blocktype is only valid within function scripts. A parameter list consisting of up to ten local variables used to hold arguments passed to the function must follow this keyword enclosed in curly braces; if the function takes no arguments the braces should be empty. See <a href=\"#User_Defined_Functions\">User-Defined Functions</a> for more information."
    ],
    "Examples": [
      {
        "Example": [
          "Begin Function {arg1, arg2, ... arg10}",
          "\t; function body",
          "End"
        ]
      }
    ],
    "Name": "Function",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Function"
    ]
  },
  {
    "Parameters": [
      {
        "type": "formID:Script"
      },
      {
        "type": "multi:Arg1",
        "optional": "true"
      },
      {
        "type": "multi:Arg2",
        "optional": "true"
      },
      {
        "type": "multi:Arg3",
        "optional": "true"
      },
      {
        "type": "multi:Arg4",
        "optional": "true"
      },
      {
        "type": "multi:Arg5",
        "optional": "true"
      },
      {
        "type": "multi:Arg6",
        "optional": "true"
      },
      {
        "type": "multi:Arg7",
        "optional": "true"
      },
      {
        "type": "multi:Arg8",
        "optional": "true"
      },
      {
        "type": "multi:Arg9",
        "optional": "true"
      },
      {
        "type": "multi:Arg10",
        "optional": "true"
      },
      {
        "type": "multi:Arg11",
        "optional": "true"
      },
      {
        "type": "multi:Arg12",
        "optional": "true"
      },
      {
        "type": "multi:Arg13",
        "optional": "true"
      },
      {
        "type": "multi:Arg14",
        "optional": "true"
      },
      {
        "type": "multi:Arg15",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "multi:ReturnValue"
      }
    ],
    "Description": [
      "Calls a user-defined function. Should be followed by a list of arguments matching the types expected by the function. If a calling reference is specified, commands within the function body will operate on that reference. Call returns whatever value is returned by the function."
    ],
    "Name": "Call",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Function"
    ]
  },
  {
    "Parameters": [
      {
        "type": "returnValue:expr"
      }
    ],
    "Description": [
      "Specifies the value to be returned from a function. Valid only within a Function block. If a function does not specify a return value, the return value is assumed to be numeric zero. If multiple calls to SetFunctionValue are processed within a single Function block, the most recent value specified will be returned."
    ],
    "Name": "SetFunctionValue",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Function"
    ]
  },
  {
    "Parameters": [],
    "ReturnType": [
      {
        "type": "stringMap:UserTime"
      }
    ],
    "Description": [
      "Returns a StringMap containing information about the time and date on the player's system.",
      "The returned StringMap has the following key/value pairs, all of which are integers:",
      "\n\tYear (1601 - 30827)",
      "\n\tMonth (1-12)",
      "\n\tDayOfWeek (1:Sunday - 7:Saturday)",
      "\n\tDay (1-31)",
      "\n\tHour (0-23)",
      "\n\tMinute (0-59)",
      "\n\tSecond (0-59)",
      "\n\tMillisecond (0-999)"
    ],
    "Name": "GetUserTime",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Expression"
    ]
  },
  {
    "Parameters": [],
    "ReturnType": [
      {
        "type": "stringMap:Data"
      }
    ],
    "Description": [
      "Returns a StringMap consisting of all of the name-value entries for the mod local data associated with the mod to which the calling script belongs. This is a copy of the local data so modifying the array contents will not modify the stored data."
    ],
    "Name": "GetAllModLocalData",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "string:Key"
      }
    ],
    "ReturnType": [
      {
        "type": "multi:Data"
      }
    ],
    "Description": [
      "Gets the data value associated with the specified key for the mod to which the calling script belongs. If no data exists for the key, returns 0."
    ],
    "Name": "GetModLocalData",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "string:Key"
      },
      {
        "type": "multi:Data"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:Success"
      }
    ],
    "Description": [
      "Sets the data value associated with the specified key for the mod to which the calling script belongs. The key must be a string; the data can be a string, number, or object. Keys are case-insensitive and unique - only one data value can be associated with a particular key."
    ],
    "Name": "SetModLocalData",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "string:Key"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:Exists"
      }
    ],
    "Description": [
      "Returns true if mod local data exists for the specified key."
    ],
    "Name": "ModLocalDataExists",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "string:Key"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:Removed"
      }
    ],
    "Description": [
      "Removes the specified entry from the mod's local data."
    ],
    "Name": "RemoveModLocalData",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsScripted"
      }
    ],
    "Description": [
      "Returns 1 if the object or reference has a script attached to it."
    ],
    "Name": "IsScripted",
    "Alias": "",
    "Version": "1.3",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "ref:ScriptID"
      }
    ],
    "Description": [
      "Returns the script of the reference or passed object."
    ],
    "Name": "GetScript",
    "Alias": "",
    "Version": "1.3",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "ref:OldScript"
      }
    ],
    "Description": [
      "Removes the script of the reference or passed object."
    ],
    "Name": "RemoveScript",
    "Alias": "",
    "Version": "1.3",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ScriptID"
      },
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "ref:OldScript"
      }
    ],
    "Description": [
      "Sets the specified script onto the calling object and Returns any previous script. Note that Oblivion doesn't have a script variable type so you must assign the script to a ref variable for this to work.",
      "NOTE: If the specified object already has a script attached to it, after changing the script the stored values of local variables for references to that object will not match the variables in the new script. If called on a reference, the variable list for the calling reference will be updated to match the new script, but other references to the same base object will not be updated.",
      "Summary: SetScript is safe to use with quests, with previously unscripted objects, and on unique references (for which no other references exist to the same base object). Using the command on base objects for which non-unique references exist may result in undefined behavior."
    ],
    "Name": "SetScript",
    "Alias": "",
    "Version": "1.3",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:Valid"
      }
    ],
    "Description": [
      "Returns 1 if the object passed in the ref variable is valid. Returns 0 if the object stored in the variable is not currently loaded in memory (for instance, a non-persistent reference) or if the variable doesn't hold any object."
    ],
    "Name": "IsFormValid",
    "Alias": "",
    "Version": "1.3",
    "Convention": "E",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "ref:ObjectRef"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:IsReference"
      }
    ],
    "Description": [
      "Returns 1 if the specified ref variable contains a reference, as opposed to a base object."
    ],
    "Name": "IsReference",
    "Alias": "",
    "Version": "1.3",
    "Convention": "B",
    "Tags": []
  },
  {
    "Parameters": [
      {
        "type": "string:VariableName"
      },
      {
        "type": "ref:QuestID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "float:VariableValue"
      }
    ],
    "Description": [
      "Looks up the value of a variable by name."
    ],
    "Name": "GetVariable",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:VariableName"
      },
      {
        "type": "ref:QuestID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:HasVariable"
      }
    ],
    "Description": [
      "Returns true if the script has a variable with the specified name."
    ],
    "Name": "HasVariable",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:VariableName"
      },
      {
        "type": "ref:QuestID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "ref:VariableValue"
      }
    ],
    "Description": [
      "Looks up the value of a ref variable by name."
    ],
    "Name": "GetRefVariable",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:VariableName"
      },
      {
        "type": "ref:QuestID",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "array_var:ArrayVariableValue"
      }
    ],
    "Description": [
      "Looks up an array variable by name on the calling object or specified quest."
    ],
    "Name": "GetArrayVariable",
    "Alias": "GetArrayVar",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:VariableName"
      },
      {
        "type": "float:NewValue"
      },
      {
        "type": "ref:QuestID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets the value of a variable by name."
    ],
    "Name": "SetVariable",
    "Alias": "",
    "Version": "4.5",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "string:VariableName"
      },
      {
        "type": "ref:NewValue"
      },
      {
        "type": "ref:QuestID",
        "optional": "true"
      }
    ],
    "Description": [
      "Sets the value of a variable by name."
    ],
    "Name": "SetRefVariable",
    "Alias": "",
    "Version": "4.5",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "formID:Script"
      },
      {
        "type": "formID:Script"
      }
    ],
    "ReturnType": [
      {
        "type": "bool:Identical"
      }
    ],
    "Description": [
      "Returns true if the compiled scripts are identical."
    ],
    "Name": "CompareScripts",
    "Alias": "",
    "Version": "4.1",
    "Convention": "",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [],
    "Description": [
      "Sets all variables in a script to zero."
    ],
    "Name": "ResetAllVariables",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "formID:Script",
        "optional": "true"
      }
    ],
    "Description": [
      "Returns the number of literal references in a script."
    ],
    "Name": "GetNumExplicitRefs",
    "Alias": "",
    "Version": "4.1",
    "Convention": "E",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [
      {
        "type": "int:Index"
      },
      {
        "type": "formID:Script",
        "optional": "true"
      }
    ],
    "ReturnType": [
      {
        "type": "ref:Object"
      }
    ],
    "Description": [
      "Returns the nth literal reference in a script."
    ],
    "Name": "GetNthExplicitRef",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [],
    "ReturnType": [
      {
        "type": "formID:Script"
      }
    ],
    "Description": [
      "Returns the script which is currently executing."
    ],
    "Name": "GetCurrentScript",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Script"
    ]
  },
  {
    "Parameters": [],
    "ReturnType": [
      {
        "type": "formID:Script"
      }
    ],
    "Description": [
      "Returns the script that called the executing function script."
    ],
    "Name": "GetCallingScript",
    "Alias": "",
    "Version": "4.1",
    "Convention": "B",
    "Tags": [
      "Script"
    ]
  }
]